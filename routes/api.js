import express from 'express';
import ical from 'ical-generator';

const router = express.Router();

// Calculate earnings
router.post('/calculate-earnings', (req, res) => {
    try {
        const { shifts, payRates } = req.body;
        const earnings = calculateEarnings(shifts, payRates);
        res.json({ earnings });
    } catch (error) {
        console.error('Calculation Error:', error);
        res.status(500).json({ error: 'Failed to calculate earnings' });
    }
});

// Generate calendar file
router.post('/generate-calendar', (req, res) => {
    try {
        const { shifts, options = {} } = req.body;
        const calendar = generateICalendar(shifts, options);

        const filename = `${options.calendarName || 'work-shifts'}.ics`.replace(/[^a-zA-Z0-9-_]/g, '-');

        res.setHeader('Content-Type', 'text/calendar; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.send(calendar.toString());
    } catch (error) {
        console.error('Calendar Error:', error);
        res.status(500).json({ error: 'Failed to generate calendar' });
    }
});

function calculateEarnings(shifts, payRates) {
    let totalEarnings = 0;
    let totalHours = 0;
    const breakdown = {
        regular: 0,
        night: 0,
        overtime125: 0,
        overtime150: 0,
        weekend150: 0,
        weekend187: 0,
        weekend225: 0,
        holiday150: 0,
        holiday187: 0,
        holiday225: 0
    };

    // Calculate each shift independently (Option B: Per Individual Shift)
    shifts.forEach(shift => {
        const shiftHours = calculateShiftHours(shift.startTime, shift.endTime);
        const baseRate = payRates.day || 50;
        const nightDifferential = payRates.nightDifferential || 5;

        // Determine shift characteristics
        const isWeekend = shift.type === 'weekend' || isWeekendDate(shift.date);
        const isHoliday = shift.holiday || false;
        const isNight = shift.type === 'night' || shift.calendarType === 'night';

        // Calculate effective hourly rate
        let effectiveRate = baseRate;
        if (isNight) {
            effectiveRate += nightDifferential;
        }

        // Apply pay calculation per individual shift
        if (isHoliday) {
            applyHolidayPayPerShift(shiftHours, effectiveRate, breakdown);
        } else if (isWeekend) {
            applyWeekendPayPerShift(shiftHours, effectiveRate, breakdown);
        } else {
            applyRegularPayPerShift(shiftHours, effectiveRate, breakdown, isNight);
        }

        totalHours += shiftHours;
    });

    // Calculate total earnings
    totalEarnings = Object.values(breakdown).reduce((sum, value) => sum + value, 0);

    return {
        totalEarnings,
        totalHours,
        breakdown
    };
}

function calculateShiftHours(startTime, endTime) {
    const start = parseTime(startTime);
    const end = parseTime(endTime);

    if (end > start) {
        return end - start;
    } else {
        // Overnight shift
        return (24 - start) + end;
    }
}

function parseTime(timeStr) {
    const match = timeStr.match(/(\d{1,2}):(\d{2})\s*(AM|PM)?/i);
    if (!match) return 0;

    let hours = parseInt(match[1]);
    const period = match[3];

    if (period && period.toUpperCase() === 'PM' && hours !== 12) {
        hours += 12;
    } else if (period && period.toUpperCase() === 'AM' && hours === 12) {
        hours = 0;
    }

    return hours;
}

function generateICalendar(shifts, options = {}) {
    const calendarName = options.calendarName || 'Work Shifts';
    const descriptionTemplate = options.eventDescription || 'Work shift\\nType: [SHIFT_TYPE]\\nDuration: [HOURS] hours\\nRate: ₪[RATE]/hour';

    const calendar = ical({
        name: calendarName,
        description: 'Work shift schedule generated by Shift Scheduler',
        timezone: 'Asia/Jerusalem'
    });

    shifts.forEach(shift => {
        try {
            const startDate = parseShiftDateTime(shift.date, shift.startTime);
            const endDate = parseShiftDateTime(shift.date, shift.endTime);

            // Handle overnight shifts
            if (endDate <= startDate) {
                endDate.setDate(endDate.getDate() + 1);
            }

            const hours = (endDate - startDate) / (1000 * 60 * 60);
            const rate = calculateShiftRate(shift.type, hours);

            const description = descriptionTemplate
                .replace(/\[SHIFT_TYPE\]/g, getShiftTypeHebrew(shift.type))
                .replace(/\[HOURS\]/g, hours.toFixed(1))
                .replace(/\[RATE\]/g, rate.toFixed(2))
                .replace(/\[LOCATION\]/g, options.location || 'Workplace')
                .replace(/\\n/g, '\n');

            const alarms = generateReminders(options.reminders || {});

            calendar.createEvent({
                start: startDate,
                end: endDate,
                summary: `${getShiftTypeHebrew(shift.type)} - Work Shift`,
                description: description,
                location: options.location || '',
                categories: [{ name: 'Work' }, { name: 'Shift' }],
                alarms: alarms,
                busystatus: 'BUSY'
            });
        } catch (error) {
            console.error('Error creating calendar event for shift:', shift, error);
        }
    });

    return calendar;
}

function parseShiftDateTime(dateStr, timeStr) {
    let date;
    if (dateStr.includes('-')) {
        date = new Date(dateStr);
    } else {
        const [month, day] = dateStr.split('/');
        date = new Date(new Date().getFullYear(), month - 1, day);
    }

    const timeMatch = timeStr.match(/(\d{1,2}):(\d{2})\s*(AM|PM)?/i);
    if (timeMatch) {
        let hours = parseInt(timeMatch[1]);
        const minutes = parseInt(timeMatch[2]);
        const period = timeMatch[3];

        if (period && period.toUpperCase() === 'PM' && hours !== 12) {
            hours += 12;
        } else if (period && period.toUpperCase() === 'AM' && hours === 12) {
            hours = 0;
        }

        date.setHours(hours, minutes, 0, 0);
    }

    return date;
}

function calculateShiftRate(shiftType, hours) {
    const baseRate = 50;

    if (shiftType === 'weekend') {
        if (hours > 10) return baseRate * 2.0;
        return baseRate * 1.5;
    }

    if (hours > 10) return baseRate * 1.5;
    if (hours > 8) return baseRate * 1.25;
    return baseRate;
}

function getShiftTypeHebrew(type) {
    const types = {
        'day': 'בוקר',
        'morning': 'בוקר',
        'evening': 'ערב',
        'night': 'לילה',
        'weekend': 'סוף שבוע'
    };
    return types[type] || type;
}

function isWeekendDate(dateStr) {
    const date = new Date(dateStr);
    const day = date.getDay();
    return day === 5 || day === 6;
}

function generateReminders(reminderSettings) {
    const alarms = [];

    try {
        if (reminderSettings.reminder1Hour) {
            alarms.push({
                type: 'display',
                trigger: 60 * 60,
                description: 'Work shift starts in 1 hour / המשמרת מתחילה בעוד שעה'
            });
        }

        if (reminderSettings.reminder1Day) {
            alarms.push({
                type: 'display',
                trigger: 24 * 60 * 60,
                description: 'Work shift tomorrow / משמרת מחר'
            });
        }

        if (reminderSettings.customReminderEnabled && reminderSettings.customReminderValue) {
            let seconds = reminderSettings.customReminderValue;
            let timeUnit = 'minutes';

            switch (reminderSettings.customReminderUnit) {
                case 'hours':
                    seconds *= 60;
                    timeUnit = seconds === 60 ? 'hour' : 'hours';
                    break;
                case 'days':
                    seconds *= 60 * 24;
                    timeUnit = seconds === 1440 ? 'day' : 'days';
                    break;
                default:
                    timeUnit = seconds === 1 ? 'minute' : 'minutes';
            }

            seconds *= 60;

            const hebrewTimeUnit = {
                'minute': 'דקה',
                'minutes': 'דקות',
                'hour': 'שעה',
                'hours': 'שעות',
                'day': 'יום',
                'days': 'ימים'
            }[timeUnit] || 'דקות';

            alarms.push({
                type: 'display',
                trigger: seconds,
                description: `Work shift in ${reminderSettings.customReminderValue} ${timeUnit} / משמרת בעוד ${reminderSettings.customReminderValue} ${hebrewTimeUnit}`
            });
        }

        if (alarms.length === 0) {
            alarms.push({
                type: 'display',
                trigger: 30 * 60,
                description: 'Work shift starts in 30 minutes / המשמרת מתחילה בעוד 30 דקות'
            });
        }
    } catch (error) {
        console.error('Error generating reminders:', error);
        return [{
            type: 'display',
            trigger: 30 * 60,
            description: 'Work shift starts in 30 minutes'
        }];
    }

    return alarms;
}

function applyRegularPayPerShift(shiftHours, effectiveRate, breakdown, isNight) {
    let remainingHours = shiftHours;

    if (remainingHours > 0) {
        const regularHours = Math.min(remainingHours, 8);
        const earnings = regularHours * effectiveRate;
        if (isNight) {
            breakdown.night += earnings;
        } else {
            breakdown.regular += earnings;
        }
        remainingHours -= regularHours;
    }

    if (remainingHours > 0) {
        const overtime125Hours = Math.min(remainingHours, 2);
        const earnings = overtime125Hours * effectiveRate * 1.25;
        breakdown.overtime125 += earnings;
        remainingHours -= overtime125Hours;
    }

    if (remainingHours > 0) {
        const earnings = remainingHours * effectiveRate * 1.5;
        breakdown.overtime150 += earnings;
    }
}

function applyWeekendPayPerShift(shiftHours, effectiveRate, breakdown) {
    let remainingHours = shiftHours;
    const weekendRate = effectiveRate * 1.5;

    if (remainingHours > 0) {
        const regularHours = Math.min(remainingHours, 8);
        const earnings = regularHours * weekendRate;
        breakdown.weekend150 += earnings;
        remainingHours -= regularHours;
    }

    if (remainingHours > 0) {
        const overtimeHours = Math.min(remainingHours, 2);
        const earnings = overtimeHours * effectiveRate * 1.75;
        breakdown.weekend187 += earnings;
        remainingHours -= overtimeHours;
    }

    if (remainingHours > 0) {
        const earnings = remainingHours * effectiveRate * 2.0;
        breakdown.weekend225 += earnings;
    }
}

function applyHolidayPayPerShift(shiftHours, effectiveRate, breakdown) {
    let remainingHours = shiftHours;
    const holidayRate = effectiveRate * 1.5;

    if (remainingHours > 0) {
        const regularHours = Math.min(remainingHours, 8);
        const earnings = regularHours * holidayRate;
        breakdown.holiday150 += earnings;
        remainingHours -= regularHours;
    }

    if (remainingHours > 0) {
        const overtimeHours = Math.min(remainingHours, 2);
        const earnings = overtimeHours * effectiveRate * 1.75;
        breakdown.holiday187 += earnings;
        remainingHours -= overtimeHours;
    }

    if (remainingHours > 0) {
        const earnings = remainingHours * effectiveRate * 2.0;
        breakdown.holiday225 += earnings;
    }
}

export default router;